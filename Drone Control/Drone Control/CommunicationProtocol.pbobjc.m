// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: communicationProtocol.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "CommunicationProtocol.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - CommunicationProtocolRoot

@implementation CommunicationProtocolRoot

@end

#pragma mark - CommunicationProtocolRoot_FileDescriptor

static GPBFileDescriptor *CommunicationProtocolRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - DroneMessage

@implementation DroneMessage

@dynamic hasCurrentMode, currentMode;
@dynamic hasCurrentSpeed, currentSpeed;
@dynamic hasCurrentPosition, currentPosition;
@dynamic hasCurrentAttitude, currentAttitude;
@dynamic hasBmpRaw, bmpRaw;
@dynamic hasGyroRaw, gyroRaw;
@dynamic hasMagRaw, magRaw;
@dynamic hasAccelRaw, accelRaw;
@dynamic hasCurrentBatteryData, currentBatteryData;
@dynamic hasOutputCommandSet, outputCommandSet;
@dynamic hasWaypoint, waypoint;
@dynamic hasHomeBase, homeBase;
@dynamic hasSeaLevelPressure, seaLevelPressure;
@dynamic hasInputCommandSet, inputCommandSet;
@dynamic hasNewMode, newMode;

typedef struct DroneMessage__storage_ {
  uint32_t _has_storage_[1];
  DroneMessage_FlightMode currentMode;
  float seaLevelPressure;
  DroneMessage_FlightMode newMode;
  DroneMessage_Velocity *currentSpeed;
  DroneMessage_Position *currentPosition;
  DroneMessage_Attitude *currentAttitude;
  DroneMessage_BaroData *bmpRaw;
  DroneMessage_ThreeDimensionalData *gyroRaw;
  DroneMessage_ThreeDimensionalData *magRaw;
  DroneMessage_ThreeDimensionalData *accelRaw;
  DroneMessage_BatteryData *currentBatteryData;
  DroneMessage_CommandSet *outputCommandSet;
  DroneMessage_Position *waypoint;
  DroneMessage_Position *homeBase;
  DroneMessage_CommandSet *inputCommandSet;
} DroneMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "currentMode",
        .number = DroneMessage_FieldNumber_CurrentMode,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(DroneMessage__storage_, currentMode),
        .defaultValue.valueEnum = DroneMessage_FlightMode_MDegraded,
        .dataTypeSpecific.enumDescFunc = DroneMessage_FlightMode_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "currentSpeed",
        .number = DroneMessage_FieldNumber_CurrentSpeed,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(DroneMessage__storage_, currentSpeed),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(DroneMessage_Velocity),
        .fieldOptions = NULL,
      },
      {
        .name = "currentPosition",
        .number = DroneMessage_FieldNumber_CurrentPosition,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(DroneMessage__storage_, currentPosition),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(DroneMessage_Position),
        .fieldOptions = NULL,
      },
      {
        .name = "currentAttitude",
        .number = DroneMessage_FieldNumber_CurrentAttitude,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(DroneMessage__storage_, currentAttitude),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(DroneMessage_Attitude),
        .fieldOptions = NULL,
      },
      {
        .name = "bmpRaw",
        .number = DroneMessage_FieldNumber_BmpRaw,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(DroneMessage__storage_, bmpRaw),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(DroneMessage_BaroData),
        .fieldOptions = NULL,
      },
      {
        .name = "gyroRaw",
        .number = DroneMessage_FieldNumber_GyroRaw,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(DroneMessage__storage_, gyroRaw),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(DroneMessage_ThreeDimensionalData),
        .fieldOptions = NULL,
      },
      {
        .name = "magRaw",
        .number = DroneMessage_FieldNumber_MagRaw,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(DroneMessage__storage_, magRaw),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(DroneMessage_ThreeDimensionalData),
        .fieldOptions = NULL,
      },
      {
        .name = "accelRaw",
        .number = DroneMessage_FieldNumber_AccelRaw,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(DroneMessage__storage_, accelRaw),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(DroneMessage_ThreeDimensionalData),
        .fieldOptions = NULL,
      },
      {
        .name = "currentBatteryData",
        .number = DroneMessage_FieldNumber_CurrentBatteryData,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(DroneMessage__storage_, currentBatteryData),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(DroneMessage_BatteryData),
        .fieldOptions = NULL,
      },
      {
        .name = "outputCommandSet",
        .number = DroneMessage_FieldNumber_OutputCommandSet,
        .hasIndex = 9,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(DroneMessage__storage_, outputCommandSet),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(DroneMessage_CommandSet),
        .fieldOptions = NULL,
      },
      {
        .name = "waypoint",
        .number = DroneMessage_FieldNumber_Waypoint,
        .hasIndex = 10,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(DroneMessage__storage_, waypoint),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(DroneMessage_Position),
        .fieldOptions = NULL,
      },
      {
        .name = "homeBase",
        .number = DroneMessage_FieldNumber_HomeBase,
        .hasIndex = 11,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(DroneMessage__storage_, homeBase),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(DroneMessage_Position),
        .fieldOptions = NULL,
      },
      {
        .name = "seaLevelPressure",
        .number = DroneMessage_FieldNumber_SeaLevelPressure,
        .hasIndex = 12,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeFloat,
        .offset = offsetof(DroneMessage__storage_, seaLevelPressure),
        .defaultValue.valueFloat = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "inputCommandSet",
        .number = DroneMessage_FieldNumber_InputCommandSet,
        .hasIndex = 13,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(DroneMessage__storage_, inputCommandSet),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(DroneMessage_CommandSet),
        .fieldOptions = NULL,
      },
      {
        .name = "newMode",
        .number = DroneMessage_FieldNumber_NewMode,
        .hasIndex = 14,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(DroneMessage__storage_, newMode),
        .defaultValue.valueEnum = DroneMessage_FlightMode_MDegraded,
        .dataTypeSpecific.enumDescFunc = DroneMessage_FlightMode_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = DroneMessage_FlightMode_EnumDescriptor },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DroneMessage class]
                                     rootClass:[CommunicationProtocolRoot class]
                                          file:CommunicationProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:enums
                                     enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(DroneMessage__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum DroneMessage_FlightMode

GPBEnumDescriptor *DroneMessage_FlightMode_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "MDegraded", .number = DroneMessage_FlightMode_MDegraded },
      { .name = "MPassThrough", .number = DroneMessage_FlightMode_MPassThrough },
      { .name = "MFlybywire", .number = DroneMessage_FlightMode_MFlybywire },
      { .name = "MAutonomous", .number = DroneMessage_FlightMode_MAutonomous },
      { .name = "MLanded", .number = DroneMessage_FlightMode_MLanded },
      { .name = "MxAutonomousAi", .number = DroneMessage_FlightMode_MxAutonomousAi },
      { .name = "MxUnavailable", .number = DroneMessage_FlightMode_MxUnavailable },
    };
    static const char *extraTextFormatInfo = "\007\000!\250\000\001!\253\000\002!\251\000\003!\252\000\004!\246\000\005\"\252\242\000\006\"\253\000";
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DroneMessage_FlightMode)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:DroneMessage_FlightMode_IsValidValue
                                      extraTextFormatInfo:extraTextFormatInfo];
  }
  return descriptor;
}

BOOL DroneMessage_FlightMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case DroneMessage_FlightMode_MDegraded:
    case DroneMessage_FlightMode_MPassThrough:
    case DroneMessage_FlightMode_MFlybywire:
    case DroneMessage_FlightMode_MAutonomous:
    case DroneMessage_FlightMode_MLanded:
    case DroneMessage_FlightMode_MxAutonomousAi:
    case DroneMessage_FlightMode_MxUnavailable:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DroneMessage_Position

@implementation DroneMessage_Position

@dynamic hasTimestamp, timestamp;
@dynamic hasRealTime, realTime;
@dynamic hasLatitude, latitude;
@dynamic hasLongitude, longitude;
@dynamic hasAltitude, altitude;

typedef struct DroneMessage_Position__storage_ {
  uint32_t _has_storage_[1];
  int32_t timestamp;
  int32_t realTime;
  float latitude;
  float longitude;
  int32_t altitude;
} DroneMessage_Position__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .number = DroneMessage_Position_FieldNumber_Timestamp,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(DroneMessage_Position__storage_, timestamp),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "realTime",
        .number = DroneMessage_Position_FieldNumber_RealTime,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(DroneMessage_Position__storage_, realTime),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "latitude",
        .number = DroneMessage_Position_FieldNumber_Latitude,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
        .offset = offsetof(DroneMessage_Position__storage_, latitude),
        .defaultValue.valueFloat = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "longitude",
        .number = DroneMessage_Position_FieldNumber_Longitude,
        .hasIndex = 3,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
        .offset = offsetof(DroneMessage_Position__storage_, longitude),
        .defaultValue.valueFloat = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "altitude",
        .number = DroneMessage_Position_FieldNumber_Altitude,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(DroneMessage_Position__storage_, altitude),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DroneMessage_Position class]
                                     rootClass:[CommunicationProtocolRoot class]
                                          file:CommunicationProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(DroneMessage_Position__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DroneMessage_Velocity

@implementation DroneMessage_Velocity

@dynamic hasTimestamp, timestamp;
@dynamic hasSpeed, speed;
@dynamic hasCourseOverGround, courseOverGround;
@dynamic hasRateOfClimb, rateOfClimb;

typedef struct DroneMessage_Velocity__storage_ {
  uint32_t _has_storage_[1];
  int32_t timestamp;
  int32_t speed;
  int32_t courseOverGround;
  int32_t rateOfClimb;
} DroneMessage_Velocity__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .number = DroneMessage_Velocity_FieldNumber_Timestamp,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(DroneMessage_Velocity__storage_, timestamp),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "speed",
        .number = DroneMessage_Velocity_FieldNumber_Speed,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(DroneMessage_Velocity__storage_, speed),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "courseOverGround",
        .number = DroneMessage_Velocity_FieldNumber_CourseOverGround,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(DroneMessage_Velocity__storage_, courseOverGround),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "rateOfClimb",
        .number = DroneMessage_Velocity_FieldNumber_RateOfClimb,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeSInt32,
        .offset = offsetof(DroneMessage_Velocity__storage_, rateOfClimb),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DroneMessage_Velocity class]
                                     rootClass:[CommunicationProtocolRoot class]
                                          file:CommunicationProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(DroneMessage_Velocity__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DroneMessage_Attitude

@implementation DroneMessage_Attitude

@dynamic hasTimestamp, timestamp;
@dynamic hasCourseMagnetic, courseMagnetic;
@dynamic hasPitch, pitch;
@dynamic hasRoll, roll;

typedef struct DroneMessage_Attitude__storage_ {
  uint32_t _has_storage_[1];
  int32_t timestamp;
  int32_t courseMagnetic;
  int32_t pitch;
  int32_t roll;
} DroneMessage_Attitude__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .number = DroneMessage_Attitude_FieldNumber_Timestamp,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(DroneMessage_Attitude__storage_, timestamp),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "courseMagnetic",
        .number = DroneMessage_Attitude_FieldNumber_CourseMagnetic,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeSInt32,
        .offset = offsetof(DroneMessage_Attitude__storage_, courseMagnetic),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "pitch",
        .number = DroneMessage_Attitude_FieldNumber_Pitch,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeSInt32,
        .offset = offsetof(DroneMessage_Attitude__storage_, pitch),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "roll",
        .number = DroneMessage_Attitude_FieldNumber_Roll,
        .hasIndex = 3,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeSInt32,
        .offset = offsetof(DroneMessage_Attitude__storage_, roll),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DroneMessage_Attitude class]
                                     rootClass:[CommunicationProtocolRoot class]
                                          file:CommunicationProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(DroneMessage_Attitude__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DroneMessage_BaroData

@implementation DroneMessage_BaroData

@dynamic hasTimestamp, timestamp;
@dynamic hasPressure, pressure;
@dynamic hasTemperature, temperature;

typedef struct DroneMessage_BaroData__storage_ {
  uint32_t _has_storage_[1];
  int32_t timestamp;
  float pressure;
  float temperature;
} DroneMessage_BaroData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .number = DroneMessage_BaroData_FieldNumber_Timestamp,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(DroneMessage_BaroData__storage_, timestamp),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "pressure",
        .number = DroneMessage_BaroData_FieldNumber_Pressure,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
        .offset = offsetof(DroneMessage_BaroData__storage_, pressure),
        .defaultValue.valueFloat = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "temperature",
        .number = DroneMessage_BaroData_FieldNumber_Temperature,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
        .offset = offsetof(DroneMessage_BaroData__storage_, temperature),
        .defaultValue.valueFloat = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DroneMessage_BaroData class]
                                     rootClass:[CommunicationProtocolRoot class]
                                          file:CommunicationProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(DroneMessage_BaroData__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DroneMessage_ThreeDimensionalData

@implementation DroneMessage_ThreeDimensionalData

@dynamic hasTimestamp, timestamp;
@dynamic hasX, x;
@dynamic hasY, y;
@dynamic hasZ, z;

typedef struct DroneMessage_ThreeDimensionalData__storage_ {
  uint32_t _has_storage_[1];
  int32_t timestamp;
  float x;
  float y;
  float z;
} DroneMessage_ThreeDimensionalData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .number = DroneMessage_ThreeDimensionalData_FieldNumber_Timestamp,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(DroneMessage_ThreeDimensionalData__storage_, timestamp),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "x",
        .number = DroneMessage_ThreeDimensionalData_FieldNumber_X,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
        .offset = offsetof(DroneMessage_ThreeDimensionalData__storage_, x),
        .defaultValue.valueFloat = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "y",
        .number = DroneMessage_ThreeDimensionalData_FieldNumber_Y,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
        .offset = offsetof(DroneMessage_ThreeDimensionalData__storage_, y),
        .defaultValue.valueFloat = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "z",
        .number = DroneMessage_ThreeDimensionalData_FieldNumber_Z,
        .hasIndex = 3,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeFloat,
        .offset = offsetof(DroneMessage_ThreeDimensionalData__storage_, z),
        .defaultValue.valueFloat = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DroneMessage_ThreeDimensionalData class]
                                     rootClass:[CommunicationProtocolRoot class]
                                          file:CommunicationProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(DroneMessage_ThreeDimensionalData__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DroneMessage_BatteryData

@implementation DroneMessage_BatteryData

@dynamic hasTimestamp, timestamp;
@dynamic hasVoltage, voltage;
@dynamic hasCurrent, current;
@dynamic hasPercentage, percentage;

typedef struct DroneMessage_BatteryData__storage_ {
  uint32_t _has_storage_[1];
  int32_t timestamp;
  int32_t voltage;
  int32_t current;
  int32_t percentage;
} DroneMessage_BatteryData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "timestamp",
        .number = DroneMessage_BatteryData_FieldNumber_Timestamp,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(DroneMessage_BatteryData__storage_, timestamp),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "voltage",
        .number = DroneMessage_BatteryData_FieldNumber_Voltage,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(DroneMessage_BatteryData__storage_, voltage),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "current",
        .number = DroneMessage_BatteryData_FieldNumber_Current,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(DroneMessage_BatteryData__storage_, current),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "percentage",
        .number = DroneMessage_BatteryData_FieldNumber_Percentage,
        .hasIndex = 3,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(DroneMessage_BatteryData__storage_, percentage),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DroneMessage_BatteryData class]
                                     rootClass:[CommunicationProtocolRoot class]
                                          file:CommunicationProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(DroneMessage_BatteryData__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DroneMessage_CommandSet

@implementation DroneMessage_CommandSet

@dynamic hasYaw, yaw;
@dynamic hasPitch, pitch;
@dynamic hasThrust, thrust;

typedef struct DroneMessage_CommandSet__storage_ {
  uint32_t _has_storage_[1];
  int32_t yaw;
  int32_t pitch;
  int32_t thrust;
} DroneMessage_CommandSet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "yaw",
        .number = DroneMessage_CommandSet_FieldNumber_Yaw,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(DroneMessage_CommandSet__storage_, yaw),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "pitch",
        .number = DroneMessage_CommandSet_FieldNumber_Pitch,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(DroneMessage_CommandSet__storage_, pitch),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "thrust",
        .number = DroneMessage_CommandSet_FieldNumber_Thrust,
        .hasIndex = 2,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(DroneMessage_CommandSet__storage_, thrust),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DroneMessage_CommandSet class]
                                     rootClass:[CommunicationProtocolRoot class]
                                          file:CommunicationProtocolRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(DroneMessage_CommandSet__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
